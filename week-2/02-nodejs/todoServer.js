/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const uuid = require("uuid");
const path = require("path");

const app = express();
let filePath = path.join(__dirname, "todos.json");
let todos = [];

function saveToFile(todos) {
  return new Promise((resolve, reject) => {
    fs.writeFile(filePath, JSON.stringify(todos), function (error) {
      if (!error) {
        resolve(true);
      } else {
        reject(false);
      }
    });
  });
}

function readFromFile() {
  return new Promise((resolve, reject) => {
    fs.readFile(filePath, "utf-8", function (error, data) {
      if (!error) {
        resolve(data);
      } else {
        reject(false);
      }
    });
  });
}

app.use(bodyParser.json());

app.get("/todos", function (request, response) {
  let result = readFromFile();
  result
    .then((data) => {
      todos = JSON.parse(data);
      response.status(200).json(todos);
      console.log("Stil Printing");
    })
    .catch(() => response.status(500).send());
});

app.get("/todos/:id", function (request, response) {
  const id = request.params.id;
  readFromFile()
    .then((data) => {
      todos = JSON.parse(data);
      let todoIdx = todos.findIndex((todo) => todo.id === id);
      if (todoIdx !== -1) {
        let todo = todos[todoIdx];
        response.status(200).json(todo);
      } else {
        response.status(404).send();
      }
    })
    .catch(() => response.status(500).send("Error Fetching Data"));
});

// POST /todos - Create a new todo item
app.post("/todos", function (request, response) {
  let todo = request.body;
  todo.id = uuid.v4();
  readFromFile()
    .then((data) => {
      todos = JSON.parse(data);
      todos.push(todo);
      saveToFile(todos)
        .then(() => response.status(201).json(todo))
        .catch(() => response.status(500).send("Error Writing File"));
    })
    .catch(() => response.status(500).send("Error Fetching Data"));
});

// PUT /todos/:id - Update an existing todo item by ID
app.put("/todos/:id", function (request, response) {
  const id = request.params.id;
  const { title, completed } = request.body;
  readFromFile()
    .then((data) => {
      todos = JSON.parse(data);
      const todoIndex = todos.findIndex((todo) => todo.id === id);
      if (todoIndex !== -1) {
        if (title !== undefined) todos[todoIndex].title = title;
        if (completed !== undefined) todos[todoIndex].completed = completed;

        saveToFile(todos)
          .then(() => response.status(200).send())
          .catch(() => response.status(500).send("Error Writing File"));
      } else {
        response.status(404).send();
      }
    })
    .catch(() => {
      response.status(500).send("Error Fetching Data");
    });
});

app.delete("/todos/:id", function (request, response) {
  const id = request.params.id;
  readFromFile()
    .then((data) => {
      todos = JSON.parse(data);
      const todoIndex = todos.findIndex((todo) => todo.id === id);
      if (todoIndex !== -1) {
        todos.splice(todoIndex, 1);
        saveToFile(todos)
          .then(() => response.status(200).send())
          .catch(() => response.status(500).send("Error Writing File"));
      } else {
        response.status(404).send();
      }
    })
    .catch(() => {
      response.status(500).send("Error Fetching Data");
    });
});

app.use((req, res) => {
  res.status(404).send();
});

// For test cases, Keep it off.
app.listen(3000);

module.exports = app;
